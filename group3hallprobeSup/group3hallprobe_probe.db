record(stringout, "$(P)$(SENSORID):NAME") {
    field(DESC, "Probe name $(SENSORID)")
    field(VAL, "$(NAME)")
	field(PINI, "YES")
	info(interest, "LOW")
}

# Note: indirectly processed at ioc startup by SNL program
record(bo, "$(P)$(SENSORID):INIT") {
    field(DESC, "Initialize probe channel")
    field(DTYP, "stream")
    field(OUT, "@group3hallprobe.proto init($(ADDR)) $(PORT)")
	
	field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:$(SENSORID):INIT")
    field(SDIS, "$(P)DISABLE")

    field(FLNK, "$(P)$(SENSORID):_LAST_CHANGE_TIME")
}

record(longout, "$(P)$(SENSORID):TRIGGER") {
    field(DESC, "Explicitly take a reading")
    field(OUT, "$(P)$(SENSORID):FIELD:_RAWSTR.PROC PP")
}

record(stringin, "$(P)$(SENSORID):FIELD:_RAWSTR") {
    field(DESC, "Raw field response string")
    field(DTYP, "stream")
    field(INP, "@group3hallprobe.proto get_field($(ADDR)) $(PORT)")
	field(SCAN, "$(FIELD_SCAN_RATE)")
	
	field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:$(SENSORID):FIELD:_RAWSTR")
    field(SDIS, "$(P)DISABLE")
	
	info(archive, "1.0 VAL")
	
	field(FLNK, "$(P)$(SENSORID):FIELD:_RAW")
}

record(ai, "$(P)$(SENSORID):FIELD:_RAW") {
    field(DESC, "Raw field")
    field(INP, "$(P)$(SENSORID):FIELD:_RAWSTR MSS")
	field(EGU, "G")
	field(PREC, "3")
	
	field(FLNK, "$(P)$(SENSORID):FIELD")
}

record (ai, "$(P)$(SENSORID):_LAST_CHANGE_TIME") {
    field(DESC, "Time the range was last changed")
    field(DTYP, "Soft Timestamp")
    field(INPA, "$(PVPREFIX)CS:IOC:$(IOCNAME):DEVIOS:GTIM_TIME")
}

#
# Compare time now with time since last range change.
# If less than preset period, then output 1 to _RECENT_RANGE_CHANGE
#
record (calcout, "$(P)$(SENSORID):_RANGE_CHANGE_MSS") {
    field(DESC, "Set the MSS of RANGE:SP")
    field(INPA, "$(PVPREFIX)CS:IOC:$(IOCNAME):DEVIOS:GTIM_TIME CP")
    field(INPB, "$(P)$(SENSORID):_LAST_CHANGE_TIME CP")
    field(INPC, "$(P)$(SENSORID):STATEMACHINE:STATE_CHANGE_DELAY CP")
    field(CALC, "ABS(A-B) < C")
    field(OUT, "$(P)$(SENSORID):_RECENT_RANGE_CHANGE PP")
}

#
# This is written to by _RANGE_CHANGE_MSS record
#
record(bo, "$(P)$(SENSORID):_RECENT_RANGE_CHANGE") {
    field(DESC, "One if < period since last change ")
    field(ZSV, "NO_ALARM")
    field(OSV, "INVALID")
}

record(calc, "$(P)$(SENSORID):FIELD") {
    field(DESC, "Field")
    field(INPA, "$(P)$(SENSORID):FIELD:_RAW MSS")
	field(B, "$(SCALE)")
	field(INPC, "$(P)$(SENSORID):_RECENT_RANGE_CHANGE CP MSS")
	field(CALC, "A*B")
	field(EGU, "G")
	field(PREC, "3")
	field(ASG, "READONLY")
	
	# Optionally process some other record after a new reading is acquired
	# (e.g. as part of HIFI's zero-field system)
	field(FLNK, "$(FLNK=)")
	
	info(interest, "HIGH")
	info(archive, "1.0 VAL")
	info(alarm, "G3HALLPR")
}

record(ai, "$(P)$(SENSORID):TEMPERATURE") {
    field(DESC, "Raw field")
    field(DTYP, "stream")
    field(INP, "@group3hallprobe.proto get_temp($(ADDR)) $(PORT)")
	field(SCAN, "$(TEMP_SCAN_RATE)")
	field(EGU, "C")
	field(PREC, "3")
	
	field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:$(SENSORID):TEMPERATURE")
    field(SDIS, "$(P)DISABLE")

    info(interest, "HIGH")
	info(archive, "5.0 VAL")
}

record(mbbo, "$(P)$(SENSORID):RANGE:SP") {
    field(DESC, "Raw field")
    field(DTYP, "stream")
    field(OUT, "@group3hallprobe.proto set_range($(ADDR)) $(PORT)")
	field(ZRST, "0.3 Tesla")
	field(ONST, "0.6 Tesla")
	field(TWST, "1.2 Tesla")
	field(THST, "3.0 Tesla")

    # Need to prevent another range change within a set period since the last one
    # to prevent instability.
	field (FLNK, "$(P)$(SENSORID):_LAST_CHANGE_TIME PP")

	field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:$(SENSORID):RANGE:SP")
    field(SDIS, "$(P)DISABLE")
	
	info(archive, "1.0 VAL")
}

alias("$(P)$(SENSORID):RANGE:SP", "$(P)$(SENSORID):RANGE")

record(mbbo, "$(P)$(SENSORID):STATEMACHINE:STATE") {
    field(ZRST, "r0")
    field(ONST, "r1")
    field(TWST, "r2")
    field(THST, "r3")
    field(FRST, "disconnected")
	field(FRSV, "MAJOR")
	
	info(archive, "VAL")
}

record(ao, "$(P)$(SENSORID):STATEMACHINE:STATE_CHANGE_DELAY") {
    field(VAL, "2.0")
	field(EGU, "s")
	field(PINI, "YES")
	
	info(archive, "VAL")
}


#
# Default move up/move down points copied from previous labview implementation.
# May be adjusted via PV sets in config, if desired.
#
record(ao, "$(P)$(SENSORID):STATEMACHINE:R3:DOWN") {
    field(VAL, "10000")
	field(EGU, "G")
	field(PINI, "YES")
	info(archive, "VAL")
}

record(ao, "$(P)$(SENSORID):STATEMACHINE:R2:UP") {
    field(VAL, "11600")
	field(EGU, "G")
	field(PINI, "YES")
	info(archive, "VAL")
}

record(ao, "$(P)$(SENSORID):STATEMACHINE:R2:DOWN") {
    field(VAL, "5000")
	field(EGU, "G")
	field(PINI, "YES")
	info(archive, "VAL")
}

record(ao, "$(P)$(SENSORID):STATEMACHINE:R1:UP") {
    field(VAL, "5800")
	field(EGU, "G")
	field(PINI, "YES")
	info(archive, "VAL")
}

record(ao, "$(P)$(SENSORID):STATEMACHINE:R1:DOWN") {
    field(VAL, "2500")
	field(EGU, "G")
	field(PINI, "YES")
	info(archive, "VAL")
}

record(ao, "$(P)$(SENSORID):STATEMACHINE:R0:UP") {
    field(VAL, "2900")
	field(EGU, "G")
	field(PINI, "YES")
	info(archive, "VAL")
}

record(stringout, "$(P)SIM:$(SENSORID):FIELD:_RAWSTR") {}
record(ao, "$(P)SIM:$(SENSORID):TEMPERATURE") {}
record(bo, "$(P)SIM:$(SENSORID):INIT") {}
record(longout, "$(P)SIM:$(SENSORID):RANGE:SP") {}
